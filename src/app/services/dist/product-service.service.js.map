{"version":3,"sources":["product-service.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAC3C,6BAAmE;AAOnE;IAEE,+BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QADpC,SAAI,GAAW,8BAA8B,CAAC;IACP,CAAC;IAExC,8CAAc,GAAd;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAa,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAC9C,iBAAU,CAAC,UAAC,GAAG;YACb,OAAO,iBAAU,CAAC,cAAM,OAAA,GAAG,CAAC,OAAO,IAAI,uBAAuB,EAAtC,CAAsC,CAAC,CAAC;QAClE,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IACD,8CAAc,GAAd,UAAe,KAAa;QAC1B,4CAA4C;QAC5C,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;YACjB,OAAO,SAAE,CAAC,IAAI,CAAC,CAAC;SACjB;QAED,mCAAmC;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAa,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI;QAC9C,sEAAsE;QACtE,UAAG,CAAC,UAAC,QAAoB,IAAK,OAAA,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,EAAf,CAAe,CAAC,EAArC,CAAqC,CAAC;QACpE,4DAA4D;QAC5D,UAAG,CAAC,UAAC,OAA6B,IAAK,OAAA,OAAO,IAAI,IAAI,EAAf,CAAe,CAAC,EACvD,iBAAU,CAAC,UAAC,GAAG;YACb,OAAO,iBAAU,CAAC,cAAM,OAAA,GAAG,CAAC,OAAO,IAAI,uBAAuB,EAAtC,CAAsC,CAAC,CAAC;QAClE,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IA3BU,qBAAqB;QAHjC,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,qBAAqB,CA4BjC;IAAD,4BAAC;CA5BD,AA4BC,IAAA;AA5BY,sDAAqB","file":"product-service.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, catchError, map, of, throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { IProduct } from '../sharedClassesAndTypes/IProduct';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductServiceService {\n  _url: string = '../assets/data/products.json';\n  constructor(private http: HttpClient) {}\n\n  GetAllProducts(): Observable<IProduct[]> {\n    return this.http.get<IProduct[]>(this._url).pipe(\n      catchError((err) => {\n        return throwError(() => err.message || 'Internal Server Error');\n      })\n    );\n  }\n  GetProductById(prdId: string): Observable<IProduct | null> {\n    // Check if the passed parameter is a number\n    if (isNaN(+prdId)) {\n      return of(null);\n    }\n\n    // Call the API to get all products\n    return this.http.get<IProduct[]>(this._url).pipe(\n      // Map the array of products to a single product with the specified ID\n      map((products: IProduct[]) => products.find((p) => p.id === +prdId)),\n      // Return null if no product was found with the specified ID\n      map((product: IProduct | undefined) => product || null),\n      catchError((err) => {\n        return throwError(() => err.message || 'Internal Server Error');\n      })\n    );\n  }\n}\n"]}