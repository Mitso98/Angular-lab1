{"version":3,"sources":["product-service.service.ts"],"names":["core_1","require","rxjs_1","ProductServiceService","http","this","_url","prototype","GetAllProducts","get","pipe","catchError","err","throwError","message","GetProductById","prdId","isNaN","of","map","products","find","p","id","product","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,QAOAE,sBAAA,WAEE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EADpBC,KAAAC,KAAe,+BA2BjB,OAxBEH,EAAAI,UAAAC,eAAA,WACE,OAAOH,KAAKD,KAAKK,IAAgBJ,KAAKC,MAAMI,KAC1CR,OAAAS,WAAW,SAACC,GACV,OAAOV,OAAAW,WAAW,WAAM,OAAAD,EAAIE,SAAW,8BAI7CX,EAAAI,UAAAQ,eAAA,SAAeC,GAEb,OAAIC,OAAOD,GACFd,OAAAgB,GAAG,MAILb,KAAKD,KAAKK,IAAgBJ,KAAKC,MAAMI,KAE1CR,OAAAiB,IAAI,SAACC,GAAyB,OAAAA,EAASC,KAAK,SAACC,GAAM,OAAAA,EAAEC,MAAQP,MAE7Dd,OAAAiB,IAAI,SAACK,GAAkC,OAAAA,GAAW,OAClDtB,OAAAS,WAAW,SAACC,GACV,OAAOV,OAAAW,WAAW,WAAM,OAAAD,EAAIE,SAAW,8BAxBlCX,EAAqBsB,WAAA,CAHjCzB,OAAA0B,WAAW,CACVC,WAAY,UAEDxB,GAAb,GAAayB,QAAAzB,sBAAAA","file":"product-service.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, catchError, map, of, throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { IProduct } from '../sharedClassesAndTypes/IProduct';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductServiceService {\n  _url: string = '../assets/data/products.json';\n  constructor(private http: HttpClient) {}\n\n  GetAllProducts(): Observable<IProduct[]> {\n    return this.http.get<IProduct[]>(this._url).pipe(\n      catchError((err) => {\n        return throwError(() => err.message || 'Internal Server Error');\n      })\n    );\n  }\n  GetProductById(prdId: string): Observable<IProduct | null> {\n    // Check if the passed parameter is a number\n    if (isNaN(+prdId)) {\n      return of(null);\n    }\n\n    // Call the API to get all products\n    return this.http.get<IProduct[]>(this._url).pipe(\n      // Map the array of products to a single product with the specified ID\n      map((products: IProduct[]) => products.find((p) => p.id === +prdId)),\n      // Return null if no product was found with the specified ID\n      map((product: IProduct | undefined) => product || null),\n      catchError((err) => {\n        return throwError(() => err.message || 'Internal Server Error');\n      })\n    );\n  }\n}\n"]}